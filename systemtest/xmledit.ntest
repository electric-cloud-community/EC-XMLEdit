# -*-Perl-*-

# xmledit.ntest -
#
# System tests for EC-XMLEdit plugin
#
# Copyright (c) 2005-2012 Electric Cloud, Inc.
# All rights reserved

use strict;
use ECTest;
use ECSelenium;
use Socket;
use Sys::Hostname;

# read in setup and tests that are common to all plugins
# system tests
require "$::gTestFileDir/ntest.common";

$::gProjectImported = 0;
$::gtestProjectName = 'XMLEdit-Tests';

$::gRunTest = 0;

sub importProject() {
    assertOK(
             $::N->import(
                          {
                            file  => "$::gTestFileDir/testdata/XMLEdit-tests.xml",
                            path  => "/projects/XMLEdit-tests",
                            force => 1
                          }
                         ),
             "import XMLEdit-tests project"
            );

    # assertOK($::N->getProcedure($::gtestProjectName, '01. Replace with all parameters'), "Procedure: 01. Replace with all parameters exists");

    # assertOK($::N->getProcedure($::gtestProjectName, '02. Replace with required parameters'), "Procedure: 02. Replace with required parameters exists");

    $::gProjectImported = 1;
}

sub doSetup() {

    if (!$::gProjectImported) {
        importProject();
    }

}

################################
# check-components-present - Check that the plugin contains required components
#
# Arguments:
#   none
#
# Returns:
#   none
#
################################

ntest 'check-components-present', {}, sub {

    # Check that the plugin contains required components

    my $xpath;
    $xpath = $::N->getSteps("$::gPlugin_name", "XPathQuery");
    assertOK($xpath, "XPathQuery");
    assertEq("XPathQuery", $xpath->findvalue("//step[1]/stepName"), "Step 1 is XPathQuery");

    $xpath = $::N->getSteps("$::gPlugin_name", "DeleteAttribute");
    assertOK($xpath, "DeleteAttribute");
    assertEq("DeleteAttribute", $xpath->findvalue("//step[1]/stepName"), "Step 1 is DeleteAttribute");

    $xpath = $::N->getSteps("$::gPlugin_name", "DeleteElement");
    assertOK($xpath, "DeleteElement");
    assertEq("DeleteElement", $xpath->findvalue("//step[1]/stepName"), "Step 1 is DeleteElement");

    $xpath = $::N->getSteps("$::gPlugin_name", "ExtractAttribute");
    assertOK($xpath, "ExtractAttribute");
    assertEq("ExtractAttribute", $xpath->findvalue("//step[1]/stepName"), "Step 1 is ExtractAttribute");

    $xpath = $::N->getSteps("$::gPlugin_name", "ExtractElement");
    assertOK($xpath, "ExtractElement");
    assertEq("ExtractElement", $xpath->findvalue("//step[1]/stepName"), "Step 1 is ExtractElement");

    $xpath = $::N->getSteps("$::gPlugin_name", "InsertAttribute");
    assertOK($xpath, "InsertAttribute");
    assertEq("InsertAttribute", $xpath->findvalue("//step[1]/stepName"), "Step 1 is InsertAttribute");

    $xpath = $::N->getSteps("$::gPlugin_name", "InsertElement");
    assertOK($xpath, "InsertElement");
    assertEq("InsertElement", $xpath->findvalue("//step[1]/stepName"), "Step 1 is InsertElement");

    $xpath = $::N->getSteps("$::gPlugin_name", "ReadAttribute");
    assertOK($xpath, "ReadAttribute");
    assertEq("ReadAttribute", $xpath->findvalue("//step[1]/stepName"), "Step 1 is ReadAttribute");

    $xpath = $::N->getSteps("$::gPlugin_name", "ReadElement");
    assertOK($xpath, "ReadElement");
    assertEq("ReadElement", $xpath->findvalue("//step[1]/stepName"), "Step 1 is ReadElement");

    $xpath = $::N->getSteps("$::gPlugin_name", "UpdateAttribute");
    assertOK($xpath, "UpdateAttribute");
    assertEq("UpdateAttribute", $xpath->findvalue("//step[1]/stepName"), "Step 1 is UpdateAttribute");

    $xpath = $::N->getSteps("$::gPlugin_name", "UpdateElement");
    assertOK($xpath, "UpdateElement");
    assertEq("UpdateElement", $xpath->findvalue("//step[1]/stepName"), "Step 1 is UpdateElement");

};

# Setup function to create files/dirs in the test output dir for manipulation
# by tests.
sub setup {
    my $data = readFile("$::gTestFileDir/testdata/testxml.xml");
    mkdir "$::gTestFileDir/testdata/tmp";
    writeFile("$::gTestFileDir/testdata/tmp/bookstore.xml", $data);
}

################################
# Eval TextEditDriver - Test loading TextEdit driver
#
# Arguments:
#   none
#
# Returns:
#   none
#
################################
ntest "Eval XMLEditDriver", {}, sub {
    use ElectricCommander::PropMod;

    # Load perl code from running Commander
    ElectricCommander::PropMod::loadPerlCodeFromProperty($::N, "/projects/$::gPlugin_name/driver/XMLEditDriver");
    my $xmledit = XMLEditDriver->new();
};

ntest "01. XpathQuery with source property", {}, sub {
    doSetup();
    setup();
    my $content = readFile("$::gTestFileDir/testdata/tmp/bookstore.xml");

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "xpath_query",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => [
                                                          {
                                                             actualParameterName => 'source',
                                                             value               => "property_path"
                                                          },
                                                          {
                                                             actualParameterName => 'property',
                                                             value               => "/myJob/bookstore"
                                                          },
                                                          {
                                                             actualParameterName => 'query',
                                                             value               => "//book/title"
                                                          },
                                                          {
                                                             actualParameterName => 'property_content',
                                                             value               => $content
                                                          },
                                                         ]
                                   }
                                  );

    # make sure it finished
    my $jobId     = 0;
    my $jobStepId = 0;
    my $status    = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . '/' . $xpath->findvalue("//jobStep[stepName='xpath_query']/calledProcedure/jobStep[stepName='XPathQuery']/logFileName");

    # Get the jobStepId
    $jobStepId = $xpath->findvalue("//jobStep[stepName='xpath_query']/jobStepId");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/01-XPathQuery.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    my $expectedOutput = "";
    $expectedOutput .= "Using plugin EC-XMLEdit version " . $::gPlugin_ver . "\n";
    $expectedOutput .= "---------------------------------------------------------------------\n";
    $expectedOutput .= "Source: property_path\n";
    $expectedOutput .= "Query: //book/title\n";
    $expectedOutput .= "---------------------------------------------------------------------\n";
    $expectedOutput .= "Everyday Italian\n";
    $expectedOutput .= "Harry Potter\n";
    $expectedOutput .= "XQuery Kick Start\n";
    $expectedOutput .= "Learning XML\n";

    assertDiff(outdent($expectedOutput), $data, '01. XpathQuery with source property successful output');
};

ntest "02. XpathQuery with source file", {}, sub {
    doSetup();
    setup();

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "xpath_query",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => [
                                                          {
                                                             actualParameterName => 'source',
                                                             value               => "filepath"
                                                          },
                                                          {
                                                             actualParameterName => 'file',
                                                             value               => "$::gTestFileDir/testdata/tmp/bookstore.xml"
                                                          },
                                                          {
                                                             actualParameterName => 'query',
                                                             value               => "//book/title"
                                                          },
                                                         ]
                                   }
                                  );

    # make sure it finished
    my $jobId     = 0;
    my $jobStepId = 0;
    my $status    = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . '/' . $xpath->findvalue("//jobStep[stepName='xpath_query']/calledProcedure/jobStep[stepName='XPathQuery']/logFileName");

    # Get the jobStepId
    $jobStepId = $xpath->findvalue("//jobStep[stepName='xpath_query']/jobStepId");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/01-XPathQuery.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    my $expectedOutput = "";
    $expectedOutput .= "Using plugin EC-XMLEdit version " . $::gPlugin_ver . "\n";
    $expectedOutput .= "---------------------------------------------------------------------\n";
    $expectedOutput .= "Source: filepath\n";
    $expectedOutput .= "Query: //book/title\n";
    $expectedOutput .= "---------------------------------------------------------------------\n";
    $expectedOutput .= "Everyday Italian\n";
    $expectedOutput .= "Harry Potter\n";
    $expectedOutput .= "XQuery Kick Start\n";
    $expectedOutput .= "Learning XML\n";

    assertDiff(outdent($expectedOutput), $data, '02. XpathQuery with source file successful output');
};

ntest "03. XpathQuery with source xml_code", {}, sub {
    doSetup();
    setup();
    my $content = readFile("$::gTestFileDir/testdata/tmp/bookstore.xml");

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "xpath_query",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => [
                                                          {
                                                             actualParameterName => 'source',
                                                             value               => "xml_code"
                                                          },
                                                          {
                                                             actualParameterName => 'query',
                                                             value               => "//book/title"
                                                          },
                                                          {
                                                             actualParameterName => 'code',
                                                             value               => $content
                                                          },
                                                         ]
                                   }
                                  );

    # make sure it finished
    my $jobId     = 0;
    my $jobStepId = 0;
    my $status    = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . '/' . $xpath->findvalue("//jobStep[stepName='xpath_query']/calledProcedure/jobStep[stepName='XPathQuery']/logFileName");

    # Get the jobStepId
    $jobStepId = $xpath->findvalue("//jobStep[stepName='xpath_query']/jobStepId");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/01-XPathQuery.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    my $expectedOutput = "";
    $expectedOutput .= "Using plugin EC-XMLEdit version " . $::gPlugin_ver . "\n";
    $expectedOutput .= "---------------------------------------------------------------------\n";
    $expectedOutput .= "Source: xml_code\n";
    $expectedOutput .= "Query: //book/title\n";
    $expectedOutput .= "---------------------------------------------------------------------\n";
    $expectedOutput .= "Everyday Italian\n";
    $expectedOutput .= "Harry Potter\n";
    $expectedOutput .= "XQuery Kick Start\n";
    $expectedOutput .= "Learning XML\n";

    assertDiff(outdent($expectedOutput), $data, '03. XpathQuery with source code successful output');
};

ntest "04. XpathQuery with wrong property", {}, sub {
    doSetup();
    setup();
    my $content = "";

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "xpath_query",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => [
                                                          {
                                                             actualParameterName => 'source',
                                                             value               => "property_path"
                                                          },
                                                          {
                                                             actualParameterName => 'property',
                                                             value               => "/myJob/bookstore"
                                                          },
                                                          {
                                                             actualParameterName => 'query',
                                                             value               => "//book/title"
                                                          },
                                                          {
                                                             actualParameterName => 'property_content',
                                                             value               => $content
                                                          },
                                                         ]
                                   }
                                  );

    # make sure it finished
    my $jobId     = 0;
    my $jobStepId = 0;
    my $status    = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . '/' . $xpath->findvalue("//jobStep[stepName='xpath_query']/calledProcedure/jobStep[stepName='XPathQuery']/logFileName");

    # Get the jobStepId
    $jobStepId = $xpath->findvalue("//jobStep[stepName='xpath_query']/jobStepId");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/01-XPathQuery.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    my $expectedOutput = "";
    $expectedOutput .= "Using plugin EC-XMLEdit version " . $::gPlugin_ver . "\n";
    $expectedOutput .= "---------------------------------------------------------------------\n";
    $expectedOutput .= "Source: property_path\n";
    $expectedOutput .= "Query: //book/title\n";
    $expectedOutput .= "---------------------------------------------------------------------\n";
    $expectedOutput .= "Empty String at";
    
    assertContains($data, $expectedOutput, '04. XpathQuery with wrong property successful output');
};

ntest "05. XpathQuery with wrong file", {}, sub {
    doSetup();
    setup();

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "xpath_query",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => [
                                                          {
                                                             actualParameterName => 'source',
                                                             value               => "filepath"
                                                          },
                                                          {
                                                             actualParameterName => 'file',
                                                             value               => "$::gTestFileDir/testdata/tmp/bookstor.xml"
                                                          },
                                                          {
                                                             actualParameterName => 'query',
                                                             value               => "//book/title"
                                                          },
                                                         ]
                                   }
                                  );

    # make sure it finished
    my $jobId     = 0;
    my $jobStepId = 0;
    my $status    = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . '/' . $xpath->findvalue("//jobStep[stepName='xpath_query']/calledProcedure/jobStep[stepName='XPathQuery']/logFileName");

    # Get the jobStepId
    $jobStepId = $xpath->findvalue("//jobStep[stepName='xpath_query']/jobStepId");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);
    
    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/01-XPathQuery.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    my $expectedOutput = "";
    $expectedOutput .= "Using plugin EC-XMLEdit version " . $::gPlugin_ver . "\n";
    $expectedOutput .= "---------------------------------------------------------------------\n";
    $expectedOutput .= "Source: filepath\n";
    $expectedOutput .= "Query: //book/title\n";
    $expectedOutput .= "---------------------------------------------------------------------\n";
    $expectedOutput .= "Could not create file parser context for file";
    
    assertContains($data, $expectedOutput, '05. XpathQuery with wrong file successful output');

};

ntest "06. XpathQuery with wrong xml_code", {}, sub {
    doSetup();
    setup();
    my $content = "";

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "xpath_query",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => [
                                                          {
                                                             actualParameterName => 'source',
                                                             value               => "xml_code"
                                                          },
                                                          {
                                                             actualParameterName => 'query',
                                                             value               => "//book/title"
                                                          },
                                                          {
                                                             actualParameterName => 'code',
                                                             value               => $content
                                                          },
                                                         ]
                                   }
                                  );

    # make sure it finished
    my $jobId     = 0;
    my $jobStepId = 0;
    my $status    = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . '/' . $xpath->findvalue("//jobStep[stepName='xpath_query']/calledProcedure/jobStep[stepName='XPathQuery']/logFileName");

    # Get the jobStepId
    $jobStepId = $xpath->findvalue("//jobStep[stepName='xpath_query']/jobStepId");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/01-XPathQuery.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    my $expectedOutput = "";
    $expectedOutput .= "Using plugin EC-XMLEdit version " . $::gPlugin_ver . "\n";
    $expectedOutput .= "---------------------------------------------------------------------\n";
    $expectedOutput .= "Source: xml_code\n";
    $expectedOutput .= "Query: //book/title\n";
    $expectedOutput .= "---------------------------------------------------------------------\n";
    $expectedOutput .= "Empty String at";

    assertContains($data, $expectedOutput, '06. XpathQuery with wrong code successful output');
};

ntest "07. ReadElement with file", {}, sub {
    doSetup();
    setup();

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "read_element",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => [
                                                          {
                                                             actualParameterName => 'source',
                                                             value               => "filepath"
                                                          },
                                                          {
                                                             actualParameterName => 'query',
                                                             value               => "//book/price"
                                                          },
                                                          {
                                                             actualParameterName => 'file',
                                                             value               => "$::gTestFileDir/testdata/tmp/bookstore.xml"
                                                          },
                                                          {
                                                             actualParameterName => 'selection',
                                                             value               => "first"
                                                          },
                                                          {
                                                             actualParameterName => 'result',
                                                             value               => "/myJob/result_xml"
                                                          },
                                                         ]
                                   }
                                  );

    # make sure it finished
    my $jobId     = 0;
    my $jobStepId = 0;
    my $status    = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . '/' . $xpath->findvalue("//jobStep[stepName='read_element']/calledProcedure/jobStep[stepName='ReadElement']/logFileName");

    # Get the jobStepId
    $jobStepId = $xpath->findvalue("//jobStep[stepName='read_element']/jobStepId");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/01-ReadElement.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    my $expectedOutput = "";
    $expectedOutput .= "Using plugin EC-XMLEdit version " . $::gPlugin_ver . "\n";
    $expectedOutput .= "---------------------------------------------------------------------\n";
    $expectedOutput .= "Source: filepath\n";
    $expectedOutput .= "Query: //book/price\n";
    $expectedOutput .= "Selection: first\n";
    $expectedOutput .= "---------------------------------------------------------------------\n";
    $expectedOutput .= "30.00\n";

    assertDiff(outdent($expectedOutput), $data, '07. ReadElement with file successful output');
};

ntest "08. ReadElement with code", {}, sub {
    doSetup();
    setup();
    my $content = readFile("$::gTestFileDir/testdata/tmp/bookstore.xml");

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "read_element",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => [
                                                          {
                                                             actualParameterName => 'source',
                                                             value               => "xml_code"
                                                          },
                                                          {
                                                             actualParameterName => 'query',
                                                             value               => "//book/price"
                                                          },
                                                          {
                                                             actualParameterName => 'code',
                                                             value               => $content
                                                          },
                                                          {
                                                             actualParameterName => 'selection',
                                                             value               => "all"
                                                          },
                                                          {
                                                             actualParameterName => 'result',
                                                             value               => "/myJob/result_xml"
                                                          },
                                                         ]
                                   }
                                  );

    # make sure it finished
    my $jobId     = 0;
    my $jobStepId = 0;
    my $status    = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . '/' . $xpath->findvalue("//jobStep[stepName='read_element']/calledProcedure/jobStep[stepName='ReadElement']/logFileName");

    # Get the jobStepId
    $jobStepId = $xpath->findvalue("//jobStep[stepName='read_element']/jobStepId");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/01-ReadElement.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    my $expectedOutput = "";
    $expectedOutput .= "Using plugin EC-XMLEdit version " . $::gPlugin_ver . "\n";
    $expectedOutput .= "---------------------------------------------------------------------\n";
    $expectedOutput .= "Source: xml_code\n";
    $expectedOutput .= "Query: //book/price\n";
    $expectedOutput .= "Selection: all\n";
    $expectedOutput .= "---------------------------------------------------------------------\n";
    $expectedOutput .= "30.00\n";
    $expectedOutput .= "29.99\n";
    $expectedOutput .= "49.99\n";
    $expectedOutput .= "39.95\n";

    assertDiff(outdent($expectedOutput), $data, '08. ReadElement with code successful output');
};

ntest "09. ReadElement with code wrong query", {}, sub {
    doSetup();
    setup();
    my $content = readFile("$::gTestFileDir/testdata/tmp/bookstore.xml");

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "read_element",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => [
                                                          {
                                                             actualParameterName => 'source',
                                                             value               => "xml_code"
                                                          },
                                                          {
                                                             actualParameterName => 'query',
                                                             value               => "//book/prices"
                                                          },
                                                          {
                                                             actualParameterName => 'code',
                                                             value               => $content
                                                          },
                                                          {
                                                             actualParameterName => 'selection',
                                                             value               => "all"
                                                          },
                                                          {
                                                             actualParameterName => 'result',
                                                             value               => "/myJob/result_xml"
                                                          },
                                                         ]
                                   }
                                  );

    # make sure it finished
    my $jobId     = 0;
    my $jobStepId = 0;
    my $status    = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . '/' . $xpath->findvalue("//jobStep[stepName='read_element']/calledProcedure/jobStep[stepName='ReadElement']/logFileName");

    # Get the jobStepId
    $jobStepId = $xpath->findvalue("//jobStep[stepName='read_element']/jobStepId");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/01-ReadElement.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    my $expectedOutput = "";
    $expectedOutput .= "Using plugin EC-XMLEdit version " . $::gPlugin_ver . "\n";
    $expectedOutput .= "---------------------------------------------------------------------\n";
    $expectedOutput .= "Source: xml_code\n";
    $expectedOutput .= "Query: //book/prices\n";
    $expectedOutput .= "Selection: all\n";
    $expectedOutput .= "---------------------------------------------------------------------\n";
    $expectedOutput .= "ERROR: Query: '//book/prices' did not return values.\n";

    assertDiff(outdent($expectedOutput), $data, '09. ReadElement with code wrong query successful output');
};

ntest "10. ReadAttribute with file", {}, sub {
    doSetup();
    setup();

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "read_attribute",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => [
                                                          {
                                                             actualParameterName => 'source',
                                                             value               => "filepath"
                                                          },
                                                          {
                                                             actualParameterName => 'query',
                                                             value               => "//book"
                                                          },
                                                          {
                                                             actualParameterName => 'file',
                                                             value               => "$::gTestFileDir/testdata/tmp/bookstore.xml"
                                                          },
                                                          {
                                                             actualParameterName => 'selection',
                                                             value               => "last"
                                                          },
                                                          {
                                                             actualParameterName => 'result',
                                                             value               => "/myJob/result_xml"
                                                          },
                                                          {
                                                             actualParameterName => 'attribute',
                                                             value               => "category"
                                                          },
                                                         ]
                                   }
                                  );

    # make sure it finished
    my $jobId     = 0;
    my $jobStepId = 0;
    my $status    = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . '/' . $xpath->findvalue("//jobStep[stepName='read_attribute']/calledProcedure/jobStep[stepName='ReadAttribute']/logFileName");

    # Get the jobStepId
    $jobStepId = $xpath->findvalue("//jobStep[stepName='read_attribute']/jobStepId");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/01-ReadAttribute.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    my $expectedOutput = "";
    $expectedOutput .= "Using plugin EC-XMLEdit version " . $::gPlugin_ver . "\n";
    $expectedOutput .= "---------------------------------------------------------------------\n";
    $expectedOutput .= "Source: filepath\n";
    $expectedOutput .= "Query: //book\n";
    $expectedOutput .= "Selection: last\n";
    $expectedOutput .= "---------------------------------------------------------------------\n";
    $expectedOutput .= " category=\"WEB\"\n";

    assertDiff(outdent($expectedOutput), $data, '10. ReadAttribute with file successful output');
};

ntest "11. ReadAttribute with code", {}, sub {
    doSetup();
    setup();
    my $content = readFile("$::gTestFileDir/testdata/tmp/bookstore.xml");

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "read_attribute",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => [
                                                          {
                                                             actualParameterName => 'source',
                                                             value               => "xml_code"
                                                          },
                                                          {
                                                             actualParameterName => 'query',
                                                             value               => "//book"
                                                          },
                                                          {
                                                             actualParameterName => 'code',
                                                             value               => $content
                                                          },
                                                          {
                                                             actualParameterName => 'selection',
                                                             value               => "all"
                                                          },
                                                          {
                                                             actualParameterName => 'result',
                                                             value               => "/myJob/result_xml"
                                                          },
                                                          {
                                                             actualParameterName => 'attribute',
                                                             value               => "category"
                                                          },
                                                         ]
                                   }
                                  );

    # make sure it finished
    my $jobId     = 0;
    my $jobStepId = 0;
    my $status    = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . '/' . $xpath->findvalue("//jobStep[stepName='read_attribute']/calledProcedure/jobStep[stepName='ReadAttribute']/logFileName");

    # Get the jobStepId
    $jobStepId = $xpath->findvalue("//jobStep[stepName='read_attribute']/jobStepId");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/01-ReadAttribute.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    my $expectedOutput = "";
    $expectedOutput .= "Using plugin EC-XMLEdit version " . $::gPlugin_ver . "\n";
    $expectedOutput .= "---------------------------------------------------------------------\n";
    $expectedOutput .= "Source: xml_code\n";
    $expectedOutput .= "Query: //book\n";
    $expectedOutput .= "Selection: all\n";
    $expectedOutput .= "---------------------------------------------------------------------\n";
    $expectedOutput .= " category=\"COOKING\"\n";
    $expectedOutput .= " category=\"CHILDREN\"\n";
    $expectedOutput .= " category=\"WEB\"\n";
    $expectedOutput .= " category=\"WEB\"\n";

    assertDiff(outdent($expectedOutput), $data, '11. ReadAttribute with code successful output');
};

ntest "12. ReadAttribute with code unexisting attribute", {}, sub {
    doSetup();
    setup();
    my $content = readFile("$::gTestFileDir/testdata/tmp/bookstore.xml");

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "read_attribute",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => [
                                                          {
                                                             actualParameterName => 'source',
                                                             value               => "xml_code"
                                                          },
                                                          {
                                                             actualParameterName => 'query',
                                                             value               => "//book"
                                                          },
                                                          {
                                                             actualParameterName => 'code',
                                                             value               => $content
                                                          },
                                                          {
                                                             actualParameterName => 'selection',
                                                             value               => "all"
                                                          },
                                                          {
                                                             actualParameterName => 'result',
                                                             value               => "/myJob/result_xml"
                                                          },
                                                          {
                                                             actualParameterName => 'attribute',
                                                             value               => "lang"
                                                          },
                                                         ]
                                   }
                                  );

    # make sure it finished
    my $jobId     = 0;
    my $jobStepId = 0;
    my $status    = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . '/' . $xpath->findvalue("//jobStep[stepName='read_attribute']/calledProcedure/jobStep[stepName='ReadAttribute']/logFileName");

    # Get the jobStepId
    $jobStepId = $xpath->findvalue("//jobStep[stepName='read_attribute']/jobStepId");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/01-ReadAttribute.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    my $expectedOutput = "";
    $expectedOutput .= "Using plugin EC-XMLEdit version " . $::gPlugin_ver . "\n";
    $expectedOutput .= "---------------------------------------------------------------------\n";
    $expectedOutput .= "Source: xml_code\n";
    $expectedOutput .= "Query: //book\n";
    $expectedOutput .= "Selection: all\n";
    $expectedOutput .= "---------------------------------------------------------------------\n";
    $expectedOutput .= "ERROR: Query: '//book/\@lang' did not return values.\n";

    assertDiff(outdent($expectedOutput), $data, '12. ReadAttribute with code unexisting attribute successful output');
};

ntest "13. DeleteElement with file", {}, sub {
    doSetup();
    setup();

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "delete_element",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => [
                                                          {
                                                             actualParameterName => 'source',
                                                             value               => "filepath"
                                                          },
                                                          {
                                                             actualParameterName => 'query',
                                                             value               => "//book"
                                                          },
                                                          {
                                                             actualParameterName => 'file',
                                                             value               => "$::gTestFileDir/testdata/tmp/bookstore.xml"
                                                          },
                                                          {
                                                             actualParameterName => 'selection',
                                                             value               => "last"
                                                          }
                                                         ]
                                   }
                                  );

    # make sure it finished
    my $jobId     = 0;
    my $jobStepId = 0;
    my $status    = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . '/' . $xpath->findvalue("//jobStep[stepName='delete_element']/calledProcedure/jobStep[stepName='DeleteElement']/logFileName");

    # Get the jobStepId
    $jobStepId = $xpath->findvalue("//jobStep[stepName='delete_element']/jobStepId");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/01-DeleteElement.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    my $expectedOutput = "";
    $expectedOutput .= "Using plugin EC-XMLEdit version " . $::gPlugin_ver . "\n";
    $expectedOutput .= "---------------------------------------------------------------------\n";
    $expectedOutput .= "Source: filepath\n";
    $expectedOutput .= "Query: //book\n";
    $expectedOutput .= "Selection: last\n";
    $expectedOutput .= "---------------------------------------------------------------------\n";
    $expectedOutput .= "<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n";
    $expectedOutput .= "<bookstore>\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "<book category=\"COOKING\">\n";
    $expectedOutput .= "  <title lang=\"en\">Everyday Italian</title>\n";
    $expectedOutput .= "  <author>Giada De Laurentiis</author>\n";
    $expectedOutput .= "  <year>2005</year>\n";
    $expectedOutput .= "  <price>30.00</price>\n";
    $expectedOutput .= "</book>\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "<book category=\"CHILDREN\">\n";
    $expectedOutput .= "  <title lang=\"en\">Harry Potter</title>\n";
    $expectedOutput .= "  <author>J K. Rowling</author>\n";
    $expectedOutput .= "  <year>2005</year>\n";
    $expectedOutput .= "  <price>29.99</price>\n";
    $expectedOutput .= "</book>\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "<book category=\"WEB\">\n";
    $expectedOutput .= "  <title lang=\"en\">XQuery Kick Start</title>\n";
    $expectedOutput .= "  <author>James McGovern</author>\n";
    $expectedOutput .= "  <author>Per Bothner</author>\n";
    $expectedOutput .= "  <author>Kurt Cagle</author>\n";
    $expectedOutput .= "  <author>James Linn</author>\n";
    $expectedOutput .= "  <author>Vaidyanathan Nagarajan</author>\n";
    $expectedOutput .= "  <year>2003</year>\n";
    $expectedOutput .= "  <price>49.99</price>\n";
    $expectedOutput .= "</book>\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "</bookstore>\n";

    assertDiff(outdent($expectedOutput), $data, '13. DeleteElement with file successful output');
};

ntest "14. DeleteElement with code", {}, sub {
    doSetup();
    setup();
    my $content = readFile("$::gTestFileDir/testdata/tmp/bookstore.xml");

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "delete_element",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => [
                                                          {
                                                             actualParameterName => 'source',
                                                             value               => "xml_code"
                                                          },
                                                          {
                                                             actualParameterName => 'query',
                                                             value               => "//book/year"
                                                          },
                                                          {
                                                             actualParameterName => 'code',
                                                             value               => $content
                                                          },
                                                          {
                                                             actualParameterName => 'selection',
                                                             value               => "all"
                                                          },
                                                          {
                                                             actualParameterName => 'result',
                                                             value               => "/myJob/result_xml"
                                                          },
                                                         ]
                                   }
                                  );

    # make sure it finished
    my $jobId     = 0;
    my $jobStepId = 0;
    my $status    = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . '/' . $xpath->findvalue("//jobStep[stepName='delete_element']/calledProcedure/jobStep[stepName='DeleteElement']/logFileName");

    # Get the jobStepId
    $jobStepId = $xpath->findvalue("//jobStep[stepName='delete_element']/jobStepId");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/01-DeleteElement.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    my $expectedOutput = "";
    $expectedOutput .= "Using plugin EC-XMLEdit version " . $::gPlugin_ver . "\n";
    $expectedOutput .= "---------------------------------------------------------------------\n";
    $expectedOutput .= "Source: xml_code\n";
    $expectedOutput .= "Query: //book/year\n";
    $expectedOutput .= "Selection: all\n";
    $expectedOutput .= "---------------------------------------------------------------------\n";
    $expectedOutput .= "<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n";
    $expectedOutput .= "<bookstore>\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "<book category=\"COOKING\">\n";
    $expectedOutput .= "  <title lang=\"en\">Everyday Italian</title>\n";
    $expectedOutput .= "  <author>Giada De Laurentiis</author>\n";
    $expectedOutput .= "  \n";
    $expectedOutput .= "  <price>30.00</price>\n";
    $expectedOutput .= "</book>\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "<book category=\"CHILDREN\">\n";
    $expectedOutput .= "  <title lang=\"en\">Harry Potter</title>\n";
    $expectedOutput .= "  <author>J K. Rowling</author>\n";
    $expectedOutput .= "  \n";
    $expectedOutput .= "  <price>29.99</price>\n";
    $expectedOutput .= "</book>\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "<book category=\"WEB\">\n";
    $expectedOutput .= "  <title lang=\"en\">XQuery Kick Start</title>\n";
    $expectedOutput .= "  <author>James McGovern</author>\n";
    $expectedOutput .= "  <author>Per Bothner</author>\n";
    $expectedOutput .= "  <author>Kurt Cagle</author>\n";
    $expectedOutput .= "  <author>James Linn</author>\n";
    $expectedOutput .= "  <author>Vaidyanathan Nagarajan</author>\n";
    $expectedOutput .= "  \n";
    $expectedOutput .= "  <price>49.99</price>\n";
    $expectedOutput .= "</book>\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "<book category=\"WEB\">\n";
    $expectedOutput .= "  <title lang=\"en\">Learning XML</title>\n";
    $expectedOutput .= "  <author>Erik T. Ray</author>\n";
    $expectedOutput .= "  \n";
    $expectedOutput .= "  <price>39.95</price>\n";
    $expectedOutput .= "</book>\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "</bookstore>\n";

    assertDiff(outdent($expectedOutput), $data, '14. DeleteElement with code successful output');
};

ntest "15. DeleteElement with code wrong query", {}, sub {
    doSetup();
    setup();
    my $content = readFile("$::gTestFileDir/testdata/tmp/bookstore.xml");

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "delete_element",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => [
                                                          {
                                                             actualParameterName => 'source',
                                                             value               => "xml_code"
                                                          },
                                                          {
                                                             actualParameterName => 'query',
                                                             value               => "//book/prices"
                                                          },
                                                          {
                                                             actualParameterName => 'code',
                                                             value               => $content
                                                          },
                                                          {
                                                             actualParameterName => 'selection',
                                                             value               => "all"
                                                          },
                                                          {
                                                             actualParameterName => 'result',
                                                             value               => "/myJob/result_xml"
                                                          },
                                                         ]
                                   }
                                  );

    # make sure it finished
    my $jobId     = 0;
    my $jobStepId = 0;
    my $status    = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . '/' . $xpath->findvalue("//jobStep[stepName='delete_element']/calledProcedure/jobStep[stepName='DeleteElement']/logFileName");

    # Get the jobStepId
    $jobStepId = $xpath->findvalue("//jobStep[stepName='delete_element']/jobStepId");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/01-DeleteElement.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    my $expectedOutput = "";
    $expectedOutput .= "Using plugin EC-XMLEdit version " . $::gPlugin_ver . "\n";
    $expectedOutput .= "---------------------------------------------------------------------\n";
    $expectedOutput .= "Source: xml_code\n";
    $expectedOutput .= "Query: //book/prices\n";
    $expectedOutput .= "Selection: all\n";
    $expectedOutput .= "---------------------------------------------------------------------\n";
    $expectedOutput .= "ERROR: Query: '//book/prices' did not return values.\n";

    assertDiff(outdent($expectedOutput), $data, '15. DeleteElement with code wrong query successful output');
};

ntest "16. DeleteAttribute with file", {}, sub {
    doSetup();
    setup();

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "delete_attribute",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => [
                                                          {
                                                             actualParameterName => 'source',
                                                             value               => "filepath"
                                                          },
                                                          {
                                                             actualParameterName => 'query',
                                                             value               => "//book"
                                                          },
                                                          {
                                                             actualParameterName => 'file',
                                                             value               => "$::gTestFileDir/testdata/tmp/bookstore.xml"
                                                          },
                                                          {
                                                             actualParameterName => 'selection',
                                                             value               => "first"
                                                          },
                                                          {
                                                             actualParameterName => 'attribute',
                                                             value               => "category"
                                                          },
                                                         ]
                                   }
                                  );

    # make sure it finished
    my $jobId     = 0;
    my $jobStepId = 0;
    my $status    = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . '/' . $xpath->findvalue("//jobStep[stepName='delete_attribute']/calledProcedure/jobStep[stepName='DeleteAttribute']/logFileName");

    # Get the jobStepId
    $jobStepId = $xpath->findvalue("//jobStep[stepName='delete_attribute']/jobStepId");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/01-DeleteAttribute.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    my $expectedOutput = "";
    $expectedOutput .= "Using plugin EC-XMLEdit version " . $::gPlugin_ver . "\n";
    $expectedOutput .= "---------------------------------------------------------------------\n";
    $expectedOutput .= "Source: filepath\n";
    $expectedOutput .= "Query: //book\n";
    $expectedOutput .= "Attribute: category\n";
    $expectedOutput .= "Selection: first\n";
    $expectedOutput .= "---------------------------------------------------------------------\n";
    $expectedOutput .= "<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n";
    $expectedOutput .= "<bookstore>\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "<book>\n";
    $expectedOutput .= "  <title lang=\"en\">Everyday Italian</title>\n";
    $expectedOutput .= "  <author>Giada De Laurentiis</author>\n";
    $expectedOutput .= "  <year>2005</year>\n";
    $expectedOutput .= "  <price>30.00</price>\n";
    $expectedOutput .= "</book>\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "<book category=\"CHILDREN\">\n";
    $expectedOutput .= "  <title lang=\"en\">Harry Potter</title>\n";
    $expectedOutput .= "  <author>J K. Rowling</author>\n";
    $expectedOutput .= "  <year>2005</year>\n";
    $expectedOutput .= "  <price>29.99</price>\n";
    $expectedOutput .= "</book>\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "<book category=\"WEB\">\n";
    $expectedOutput .= "  <title lang=\"en\">XQuery Kick Start</title>\n";
    $expectedOutput .= "  <author>James McGovern</author>\n";
    $expectedOutput .= "  <author>Per Bothner</author>\n";
    $expectedOutput .= "  <author>Kurt Cagle</author>\n";
    $expectedOutput .= "  <author>James Linn</author>\n";
    $expectedOutput .= "  <author>Vaidyanathan Nagarajan</author>\n";
    $expectedOutput .= "  <year>2003</year>\n";
    $expectedOutput .= "  <price>49.99</price>\n";
    $expectedOutput .= "</book>\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "<book category=\"WEB\">\n";
    $expectedOutput .= "  <title lang=\"en\">Learning XML</title>\n";
    $expectedOutput .= "  <author>Erik T. Ray</author>\n";
    $expectedOutput .= "  <year>2003</year>\n";
    $expectedOutput .= "  <price>39.95</price>\n";
    $expectedOutput .= "</book>\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "</bookstore>\n";

    assertDiff(outdent($expectedOutput), $data, '16. DeleteAttribute with file successful output');
};

ntest "17. DeleteAttribute with code unexisting attribute", {}, sub {
    doSetup();
    setup();
    my $content = readFile("$::gTestFileDir/testdata/tmp/bookstore.xml");

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "delete_attribute",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => [
                                                          {
                                                             actualParameterName => 'source',
                                                             value               => "xml_code"
                                                          },
                                                          {
                                                             actualParameterName => 'query',
                                                             value               => "//book"
                                                          },
                                                          {
                                                             actualParameterName => 'code',
                                                             value               => $content
                                                          },
                                                          {
                                                             actualParameterName => 'selection',
                                                             value               => "all"
                                                          },
                                                          {
                                                             actualParameterName => 'result',
                                                             value               => "/myJob/result_xml"
                                                          },
                                                          {
                                                             actualParameterName => 'attribute',
                                                             value               => "lang"
                                                          },
                                                         ]
                                   }
                                  );

    # make sure it finished
    my $jobId     = 0;
    my $jobStepId = 0;
    my $status    = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . '/' . $xpath->findvalue("//jobStep[stepName='delete_attribute']/calledProcedure/jobStep[stepName='DeleteAttribute']/logFileName");

    # Get the jobStepId
    $jobStepId = $xpath->findvalue("//jobStep[stepName='delete_attribute']/jobStepId");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/01-DeleteAttribute.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    my $expectedOutput = "";
    $expectedOutput .= "Using plugin EC-XMLEdit version " . $::gPlugin_ver . "\n";
    $expectedOutput .= "---------------------------------------------------------------------\n";
    $expectedOutput .= "Source: xml_code\n";
    $expectedOutput .= "Query: //book\n";
    $expectedOutput .= "Attribute: lang\n";
    $expectedOutput .= "Selection: all\n";
    $expectedOutput .= "---------------------------------------------------------------------\n";
    $expectedOutput .= "Attribute 'lang' not found.\n";
    $expectedOutput .= "Attribute 'lang' not found.\n";
    $expectedOutput .= "Attribute 'lang' not found.\n";
    $expectedOutput .= "Attribute 'lang' not found.\n";
    $expectedOutput .= "<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n";
    $expectedOutput .= "<bookstore>\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "<book category=\"COOKING\">\n";
    $expectedOutput .= "  <title lang=\"en\">Everyday Italian</title>\n";
    $expectedOutput .= "  <author>Giada De Laurentiis</author>\n";
    $expectedOutput .= "  <year>2005</year>\n";
    $expectedOutput .= "  <price>30.00</price>\n";
    $expectedOutput .= "</book>\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "<book category=\"CHILDREN\">\n";
    $expectedOutput .= "  <title lang=\"en\">Harry Potter</title>\n";
    $expectedOutput .= "  <author>J K. Rowling</author>\n";
    $expectedOutput .= "  <year>2005</year>\n";
    $expectedOutput .= "  <price>29.99</price>\n";
    $expectedOutput .= "</book>\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "<book category=\"WEB\">\n";
    $expectedOutput .= "  <title lang=\"en\">XQuery Kick Start</title>\n";
    $expectedOutput .= "  <author>James McGovern</author>\n";
    $expectedOutput .= "  <author>Per Bothner</author>\n";
    $expectedOutput .= "  <author>Kurt Cagle</author>\n";
    $expectedOutput .= "  <author>James Linn</author>\n";
    $expectedOutput .= "  <author>Vaidyanathan Nagarajan</author>\n";
    $expectedOutput .= "  <year>2003</year>\n";
    $expectedOutput .= "  <price>49.99</price>\n";
    $expectedOutput .= "</book>\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "<book category=\"WEB\">\n";
    $expectedOutput .= "  <title lang=\"en\">Learning XML</title>\n";
    $expectedOutput .= "  <author>Erik T. Ray</author>\n";
    $expectedOutput .= "  <year>2003</year>\n";
    $expectedOutput .= "  <price>39.95</price>\n";
    $expectedOutput .= "</book>\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "</bookstore>\n";

    assertDiff(outdent($expectedOutput), $data, '17. DeleteAttribute with code unexisting attribute successful output');
};

ntest "18. InsertElement with file", {}, sub {
    doSetup();
    setup();

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "insert_element",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => [
                                                          {
                                                             actualParameterName => 'source',
                                                             value               => "filepath"
                                                          },
                                                          {
                                                             actualParameterName => 'query',
                                                             value               => "//book"
                                                          },
                                                          {
                                                             actualParameterName => 'file',
                                                             value               => "$::gTestFileDir/testdata/tmp/bookstore.xml"
                                                          },
                                                          {
                                                             actualParameterName => 'selection',
                                                             value               => "first"
                                                          },
                                                          {
                                                             actualParameterName => 'element',
                                                             value               => "author"
                                                          },
                                                          {
                                                             actualParameterName => 'value',
                                                             value               => "Andres Arias S."
                                                          },
                                                         ]
                                   }
                                  );

    # make sure it finished
    my $jobId     = 0;
    my $jobStepId = 0;
    my $status    = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . '/' . $xpath->findvalue("//jobStep[stepName='insert_element']/calledProcedure/jobStep[stepName='InsertElement']/logFileName");

    # Get the jobStepId
    $jobStepId = $xpath->findvalue("//jobStep[stepName='insert_element']/jobStepId");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/01-InsertElement.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    my $expectedOutput = "";
    $expectedOutput .= "Using plugin EC-XMLEdit version " . $::gPlugin_ver . "\n";
    $expectedOutput .= "---------------------------------------------------------------------\n";
    $expectedOutput .= "Source: filepath\n";
    $expectedOutput .= "Query: //book\n";
    $expectedOutput .= "Selection: first\n";
    $expectedOutput .= "---------------------------------------------------------------------\n";
    $expectedOutput .= "<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n";
    $expectedOutput .= "<bookstore>\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "<book category=\"COOKING\">\n";
    $expectedOutput .= "  <title lang=\"en\">Everyday Italian</title>\n";
    $expectedOutput .= "  <author>Giada De Laurentiis</author>\n";
    $expectedOutput .= "  <year>2005</year>\n";
    $expectedOutput .= "  <price>30.00</price>\n";
    $expectedOutput .= "<author>Andres Arias S.</author></book>\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "<book category=\"CHILDREN\">\n";
    $expectedOutput .= "  <title lang=\"en\">Harry Potter</title>\n";
    $expectedOutput .= "  <author>J K. Rowling</author>\n";
    $expectedOutput .= "  <year>2005</year>\n";
    $expectedOutput .= "  <price>29.99</price>\n";
    $expectedOutput .= "</book>\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "<book category=\"WEB\">\n";
    $expectedOutput .= "  <title lang=\"en\">XQuery Kick Start</title>\n";
    $expectedOutput .= "  <author>James McGovern</author>\n";
    $expectedOutput .= "  <author>Per Bothner</author>\n";
    $expectedOutput .= "  <author>Kurt Cagle</author>\n";
    $expectedOutput .= "  <author>James Linn</author>\n";
    $expectedOutput .= "  <author>Vaidyanathan Nagarajan</author>\n";
    $expectedOutput .= "  <year>2003</year>\n";
    $expectedOutput .= "  <price>49.99</price>\n";
    $expectedOutput .= "</book>\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "<book category=\"WEB\">\n";
    $expectedOutput .= "  <title lang=\"en\">Learning XML</title>\n";
    $expectedOutput .= "  <author>Erik T. Ray</author>\n";
    $expectedOutput .= "  <year>2003</year>\n";
    $expectedOutput .= "  <price>39.95</price>\n";
    $expectedOutput .= "</book>\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "</bookstore>\n";

    assertDiff(outdent($expectedOutput), $data, '18. InsertElement with file successful output');
};

ntest "19. InsertElement with property and empty value", {}, sub {
    doSetup();
    setup();

    my $content = readFile("$::gTestFileDir/testdata/tmp/bookstore.xml");

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "insert_element",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => [
                                                          {
                                                             actualParameterName => 'source',
                                                             value               => "property_path"
                                                          },
                                                          {
                                                             actualParameterName => 'property',
                                                             value               => "/myJob/bookstore"
                                                          },
                                                          {
                                                             actualParameterName => 'property_content',
                                                             value               => $content
                                                          },
                                                          {
                                                             actualParameterName => 'query',
                                                             value               => "//book"
                                                          },
                                                          {
                                                             actualParameterName => 'selection',
                                                             value               => "all"
                                                          },
                                                          {
                                                             actualParameterName => 'element',
                                                             value               => "isbn"
                                                          },
                                                          {
                                                             actualParameterName => 'value',
                                                             value               => ""
                                                          },
                                                         ]
                                   }
                                  );

    # make sure it finished
    my $jobId     = 0;
    my $jobStepId = 0;
    my $status    = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . '/' . $xpath->findvalue("//jobStep[stepName='insert_element']/calledProcedure/jobStep[stepName='InsertElement']/logFileName");

    # Get the jobStepId
    $jobStepId = $xpath->findvalue("//jobStep[stepName='insert_element']/jobStepId");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/01-InsertElement.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    my $expectedOutput = "";
    $expectedOutput .= "Using plugin EC-XMLEdit version " . $::gPlugin_ver . "\n";
    $expectedOutput .= "---------------------------------------------------------------------\n";
    $expectedOutput .= "Source: property_path\n";
    $expectedOutput .= "Query: //book\n";
    $expectedOutput .= "Selection: all\n";
    $expectedOutput .= "---------------------------------------------------------------------\n";
    $expectedOutput .= "Empty String at";

    assertContains($data, $expectedOutput, '19. InsertElement with property and empty value successful output');
};

ntest "20. InsertElement with code", {}, sub {
    doSetup();
    setup();
    my $content = readFile("$::gTestFileDir/testdata/tmp/bookstore.xml");

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "insert_element",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => [
                                                          {
                                                             actualParameterName => 'source',
                                                             value               => "xml_code"
                                                          },
                                                          {
                                                             actualParameterName => 'code',
                                                             value               => $content
                                                          },
                                                          {
                                                             actualParameterName => 'query',
                                                             value               => "//book"
                                                          },
                                                          {
                                                             actualParameterName => 'element',
                                                             value               => "isbn"
                                                          },
                                                          {
                                                             actualParameterName => 'value',
                                                             value               => "123456"
                                                          },
                                                          {
                                                             actualParameterName => 'selection',
                                                             value               => "all"
                                                          },
                                                          {
                                                             actualParameterName => 'result',
                                                             value               => "/myJob/result_xml"
                                                          },
                                                         ]
                                   }
                                  );

    # make sure it finished
    my $jobId     = 0;
    my $jobStepId = 0;
    my $status    = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . '/' . $xpath->findvalue("//jobStep[stepName='insert_element']/calledProcedure/jobStep[stepName='InsertElement']/logFileName");

    # Get the jobStepId
    $jobStepId = $xpath->findvalue("//jobStep[stepName='insert_element']/jobStepId");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/01-InsertElement.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    my $expectedOutput = "";
    $expectedOutput .= "Using plugin EC-XMLEdit version " . $::gPlugin_ver . "\n";
    $expectedOutput .= "---------------------------------------------------------------------\n";
    $expectedOutput .= "Source: xml_code\n";
    $expectedOutput .= "Query: //book\n";
    $expectedOutput .= "Selection: all\n";
    $expectedOutput .= "---------------------------------------------------------------------\n";
    $expectedOutput .= "<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n";
    $expectedOutput .= "<bookstore>\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "<book category=\"COOKING\">\n";
    $expectedOutput .= "  <title lang=\"en\">Everyday Italian</title>\n";
    $expectedOutput .= "  <author>Giada De Laurentiis</author>\n";
    $expectedOutput .= "  <year>2005</year>\n";
    $expectedOutput .= "  <price>30.00</price>\n";
    $expectedOutput .= "<isbn>123456</isbn></book>\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "<book category=\"CHILDREN\">\n";
    $expectedOutput .= "  <title lang=\"en\">Harry Potter</title>\n";
    $expectedOutput .= "  <author>J K. Rowling</author>\n";
    $expectedOutput .= "  <year>2005</year>\n";
    $expectedOutput .= "  <price>29.99</price>\n";
    $expectedOutput .= "<isbn>123456</isbn></book>\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "<book category=\"WEB\">\n";
    $expectedOutput .= "  <title lang=\"en\">XQuery Kick Start</title>\n";
    $expectedOutput .= "  <author>James McGovern</author>\n";
    $expectedOutput .= "  <author>Per Bothner</author>\n";
    $expectedOutput .= "  <author>Kurt Cagle</author>\n";
    $expectedOutput .= "  <author>James Linn</author>\n";
    $expectedOutput .= "  <author>Vaidyanathan Nagarajan</author>\n";
    $expectedOutput .= "  <year>2003</year>\n";
    $expectedOutput .= "  <price>49.99</price>\n";
    $expectedOutput .= "<isbn>123456</isbn></book>\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "<book category=\"WEB\">\n";
    $expectedOutput .= "  <title lang=\"en\">Learning XML</title>\n";
    $expectedOutput .= "  <author>Erik T. Ray</author>\n";
    $expectedOutput .= "  <year>2003</year>\n";
    $expectedOutput .= "  <price>39.95</price>\n";
    $expectedOutput .= "<isbn>123456</isbn></book>\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "</bookstore>\n";

    assertDiff(outdent($expectedOutput), $data, '20. InsertElement with code successful output');
};

ntest "21. InsertElement with code wrong query", {}, sub {
    doSetup();
    setup();
    my $content = readFile("$::gTestFileDir/testdata/tmp/bookstore.xml");

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "insert_element",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => [
                                                          {
                                                             actualParameterName => 'source',
                                                             value               => "xml_code"
                                                          },
                                                          {
                                                             actualParameterName => 'code',
                                                             value               => $content
                                                          },
                                                          {
                                                             actualParameterName => 'query',
                                                             value               => "//books"
                                                          },
                                                          {
                                                             actualParameterName => 'element',
                                                             value               => "isbn"
                                                          },
                                                          {
                                                             actualParameterName => 'value',
                                                             value               => "123456"
                                                          },
                                                          {
                                                             actualParameterName => 'selection',
                                                             value               => "all"
                                                          },
                                                          {
                                                             actualParameterName => 'result',
                                                             value               => "/myJob/result_xml"
                                                          },
                                                         ]
                                   }
                                  );

    # make sure it finished
    my $jobId     = 0;
    my $jobStepId = 0;
    my $status    = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . '/' . $xpath->findvalue("//jobStep[stepName='insert_element']/calledProcedure/jobStep[stepName='InsertElement']/logFileName");

    # Get the jobStepId
    $jobStepId = $xpath->findvalue("//jobStep[stepName='insert_element']/jobStepId");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/01-InsertElement.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    my $expectedOutput = "";
    $expectedOutput .= "Using plugin EC-XMLEdit version " . $::gPlugin_ver . "\n";
    $expectedOutput .= "---------------------------------------------------------------------\n";
    $expectedOutput .= "Source: xml_code\n";
    $expectedOutput .= "Query: //books\n";
    $expectedOutput .= "Selection: all\n";
    $expectedOutput .= "---------------------------------------------------------------------\n";
    $expectedOutput .= "ERROR: Query: '//books' did not return values.\n";

    assertDiff(outdent($expectedOutput), $data, '21. InsertElement with code wrong query successful output');
};

ntest "22. InsertAttribute with file", {}, sub {
    doSetup();
    setup();

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "insert_attribute",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => [
                                                          {
                                                             actualParameterName => 'source',
                                                             value               => "filepath"
                                                          },
                                                          {
                                                             actualParameterName => 'file',
                                                             value               => "$::gTestFileDir/testdata/tmp/bookstore.xml"
                                                          },
                                                          {
                                                             actualParameterName => 'query',
                                                             value               => "//book/author"
                                                          },
                                                          {
                                                             actualParameterName => 'attribute',
                                                             value               => "country"
                                                          },
                                                          {
                                                             actualParameterName => 'value',
                                                             value               => "Costa Rica"
                                                          },
                                                          {
                                                             actualParameterName => 'selection',
                                                             value               => "last"
                                                          },
                                                         ]
                                   }
                                  );

    # make sure it finished
    my $jobId     = 0;
    my $jobStepId = 0;
    my $status    = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . '/' . $xpath->findvalue("//jobStep[stepName='insert_attribute']/calledProcedure/jobStep[stepName='InsertAttribute']/logFileName");

    # Get the jobStepId
    $jobStepId = $xpath->findvalue("//jobStep[stepName='insert_attribute']/jobStepId");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/01-InsertAttribute.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    my $expectedOutput = "";
    $expectedOutput .= "Using plugin EC-XMLEdit version " . $::gPlugin_ver . "\n";
    $expectedOutput .= "---------------------------------------------------------------------\n";
    $expectedOutput .= "Source: filepath\n";
    $expectedOutput .= "Query: //book/author\n";
    $expectedOutput .= "Selection: last\n";
    $expectedOutput .= "---------------------------------------------------------------------\n";
    $expectedOutput .= "<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n";
    $expectedOutput .= "<bookstore>\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "<book category=\"COOKING\">\n";
    $expectedOutput .= "  <title lang=\"en\">Everyday Italian</title>\n";
    $expectedOutput .= "  <author>Giada De Laurentiis</author>\n";
    $expectedOutput .= "  <year>2005</year>\n";
    $expectedOutput .= "  <price>30.00</price>\n";
    $expectedOutput .= "</book>\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "<book category=\"CHILDREN\">\n";
    $expectedOutput .= "  <title lang=\"en\">Harry Potter</title>\n";
    $expectedOutput .= "  <author>J K. Rowling</author>\n";
    $expectedOutput .= "  <year>2005</year>\n";
    $expectedOutput .= "  <price>29.99</price>\n";
    $expectedOutput .= "</book>\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "<book category=\"WEB\">\n";
    $expectedOutput .= "  <title lang=\"en\">XQuery Kick Start</title>\n";
    $expectedOutput .= "  <author>James McGovern</author>\n";
    $expectedOutput .= "  <author>Per Bothner</author>\n";
    $expectedOutput .= "  <author>Kurt Cagle</author>\n";
    $expectedOutput .= "  <author>James Linn</author>\n";
    $expectedOutput .= "  <author>Vaidyanathan Nagarajan</author>\n";
    $expectedOutput .= "  <year>2003</year>\n";
    $expectedOutput .= "  <price>49.99</price>\n";
    $expectedOutput .= "</book>\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "<book category=\"WEB\">\n";
    $expectedOutput .= "  <title lang=\"en\">Learning XML</title>\n";
    $expectedOutput .= "  <author country=\"Costa Rica\">Erik T. Ray</author>\n";
    $expectedOutput .= "  <year>2003</year>\n";
    $expectedOutput .= "  <price>39.95</price>\n";
    $expectedOutput .= "</book>\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "</bookstore>\n";

    assertDiff(outdent($expectedOutput), $data, '22. InsertAttribute with file successful output');
};

ntest "23. InsertAttribute with property and empty value", {}, sub {
    doSetup();
    setup();

    my $content = readFile("$::gTestFileDir/testdata/tmp/bookstore.xml");

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "insert_attribute",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => [
                                                          {
                                                             actualParameterName => 'source',
                                                             value               => "property_path"
                                                          },
                                                          {
                                                             actualParameterName => 'property',
                                                             value               => "/myJob/bookstore"
                                                          },
                                                          {
                                                             actualParameterName => 'property_content',
                                                             value               => $content
                                                          },
                                                          {
                                                             actualParameterName => 'query',
                                                             value               => "//book"
                                                          },
                                                          {
                                                             actualParameterName => 'attribute',
                                                             value               => "country"
                                                          },
                                                          {
                                                             actualParameterName => 'value',
                                                             value               => ""
                                                          },
                                                          {
                                                             actualParameterName => 'selection',
                                                             value               => "first"
                                                          },
                                                         ]
                                   }
                                  );

    # make sure it finished
    my $jobId     = 0;
    my $jobStepId = 0;
    my $status    = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . '/' . $xpath->findvalue("//jobStep[stepName='insert_attribute']/calledProcedure/jobStep[stepName='InsertAttribute']/logFileName");

    # Get the jobStepId
    $jobStepId = $xpath->findvalue("//jobStep[stepName='insert_attribute']/jobStepId");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/01-InsertAttribute.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    my $expectedOutput = "";
    $expectedOutput .= "Using plugin EC-XMLEdit version " . $::gPlugin_ver . "\n";
    $expectedOutput .= "---------------------------------------------------------------------\n";
    $expectedOutput .= "Source: property_path\n";
    $expectedOutput .= "Query: //book\n";
    $expectedOutput .= "Selection: first\n";
    $expectedOutput .= "---------------------------------------------------------------------\n";
    $expectedOutput .= "<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n";
    $expectedOutput .= "<bookstore>\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "<book category=\"COOKING\" country=\"\">\n";
    $expectedOutput .= "  <title lang=\"en\">Everyday Italian</title>\n";
    $expectedOutput .= "  <author>Giada De Laurentiis</author>\n";
    $expectedOutput .= "  <year>2005</year>\n";
    $expectedOutput .= "  <price>30.00</price>\n";
    $expectedOutput .= "</book>\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "<book category=\"CHILDREN\">\n";
    $expectedOutput .= "  <title lang=\"en\">Harry Potter</title>\n";
    $expectedOutput .= "  <author>J K. Rowling</author>\n";
    $expectedOutput .= "  <year>2005</year>\n";
    $expectedOutput .= "  <price>29.99</price>\n";
    $expectedOutput .= "</book>\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "<book category=\"WEB\">\n";
    $expectedOutput .= "  <title lang=\"en\">XQuery Kick Start</title>\n";
    $expectedOutput .= "  <author>James McGovern</author>\n";
    $expectedOutput .= "  <author>Per Bothner</author>\n";
    $expectedOutput .= "  <author>Kurt Cagle</author>\n";
    $expectedOutput .= "  <author>James Linn</author>\n";
    $expectedOutput .= "  <author>Vaidyanathan Nagarajan</author>\n";
    $expectedOutput .= "  <year>2003</year>\n";
    $expectedOutput .= "  <price>49.99</price>\n";
    $expectedOutput .= "</book>\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "<book category=\"WEB\">\n";
    $expectedOutput .= "  <title lang=\"en\">Learning XML</title>\n";
    $expectedOutput .= "  <author>Erik T. Ray</author>\n";
    $expectedOutput .= "  <year>2003</year>\n";
    $expectedOutput .= "  <price>39.95</price>\n";
    $expectedOutput .= "</book>\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "</bookstore>\n";

    assertDiff(outdent($expectedOutput), $data, '23. InsertAttribute with property and empty value successful output');
};

ntest "24. InsertAttribute with code", {}, sub {
    doSetup();
    setup();
    my $content = readFile("$::gTestFileDir/testdata/tmp/bookstore.xml");

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "insert_attribute",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => [
                                                          {
                                                             actualParameterName => 'source',
                                                             value               => "xml_code"
                                                          },
                                                          {
                                                             actualParameterName => 'code',
                                                             value               => $content
                                                          },
                                                          {
                                                             actualParameterName => 'query',
                                                             value               => "//book"
                                                          },
                                                          {
                                                             actualParameterName => 'attribute',
                                                             value               => "country"
                                                          },
                                                          {
                                                             actualParameterName => 'value',
                                                             value               => "Costa Rica"
                                                          },
                                                          {
                                                             actualParameterName => 'selection',
                                                             value               => "all"
                                                          },
                                                          {
                                                             actualParameterName => 'result',
                                                             value               => "/myJob/result_xml"
                                                          },
                                                         ]
                                   }
                                  );

    # make sure it finished
    my $jobId     = 0;
    my $jobStepId = 0;
    my $status    = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . '/' . $xpath->findvalue("//jobStep[stepName='insert_attribute']/calledProcedure/jobStep[stepName='InsertAttribute']/logFileName");

    # Get the jobStepId
    $jobStepId = $xpath->findvalue("//jobStep[stepName='insert_attribute']/jobStepId");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/01-InsertAttribute.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    my $expectedOutput = "";
    $expectedOutput .= "Using plugin EC-XMLEdit version " . $::gPlugin_ver . "\n";
    $expectedOutput .= "---------------------------------------------------------------------\n";
    $expectedOutput .= "Source: xml_code\n";
    $expectedOutput .= "Query: //book\n";
    $expectedOutput .= "Selection: all\n";
    $expectedOutput .= "---------------------------------------------------------------------\n";
    $expectedOutput .= "<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n";
    $expectedOutput .= "<bookstore>\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "<book category=\"COOKING\" country=\"Costa Rica\">\n";
    $expectedOutput .= "  <title lang=\"en\">Everyday Italian</title>\n";
    $expectedOutput .= "  <author>Giada De Laurentiis</author>\n";
    $expectedOutput .= "  <year>2005</year>\n";
    $expectedOutput .= "  <price>30.00</price>\n";
    $expectedOutput .= "</book>\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "<book category=\"CHILDREN\" country=\"Costa Rica\">\n";
    $expectedOutput .= "  <title lang=\"en\">Harry Potter</title>\n";
    $expectedOutput .= "  <author>J K. Rowling</author>\n";
    $expectedOutput .= "  <year>2005</year>\n";
    $expectedOutput .= "  <price>29.99</price>\n";
    $expectedOutput .= "</book>\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "<book category=\"WEB\" country=\"Costa Rica\">\n";
    $expectedOutput .= "  <title lang=\"en\">XQuery Kick Start</title>\n";
    $expectedOutput .= "  <author>James McGovern</author>\n";
    $expectedOutput .= "  <author>Per Bothner</author>\n";
    $expectedOutput .= "  <author>Kurt Cagle</author>\n";
    $expectedOutput .= "  <author>James Linn</author>\n";
    $expectedOutput .= "  <author>Vaidyanathan Nagarajan</author>\n";
    $expectedOutput .= "  <year>2003</year>\n";
    $expectedOutput .= "  <price>49.99</price>\n";
    $expectedOutput .= "</book>\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "<book category=\"WEB\" country=\"Costa Rica\">\n";
    $expectedOutput .= "  <title lang=\"en\">Learning XML</title>\n";
    $expectedOutput .= "  <author>Erik T. Ray</author>\n";
    $expectedOutput .= "  <year>2003</year>\n";
    $expectedOutput .= "  <price>39.95</price>\n";
    $expectedOutput .= "</book>\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "</bookstore>\n";

    assertDiff(outdent($expectedOutput), $data, '24. InsertAttribute with code successful output');
};

ntest "25. InsertAttribute with code existing attribute", {}, sub {
    doSetup();
    setup();
    my $content = readFile("$::gTestFileDir/testdata/tmp/bookstore.xml");

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "insert_attribute",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => [
                                                          {
                                                             actualParameterName => 'source',
                                                             value               => "xml_code"
                                                          },
                                                          {
                                                             actualParameterName => 'code',
                                                             value               => $content
                                                          },
                                                          {
                                                             actualParameterName => 'query',
                                                             value               => "//book"
                                                          },
                                                          {
                                                             actualParameterName => 'attribute',
                                                             value               => "category"
                                                          },
                                                          {
                                                             actualParameterName => 'value',
                                                             value               => "UNDEFINED"
                                                          },
                                                          {
                                                             actualParameterName => 'selection',
                                                             value               => "all"
                                                          },
                                                          {
                                                             actualParameterName => 'result',
                                                             value               => "/myJob/result_xml"
                                                          },
                                                         ]
                                   }
                                  );

    # make sure it finished
    my $jobId     = 0;
    my $jobStepId = 0;
    my $status    = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . '/' . $xpath->findvalue("//jobStep[stepName='insert_attribute']/calledProcedure/jobStep[stepName='InsertAttribute']/logFileName");

    # Get the jobStepId
    $jobStepId = $xpath->findvalue("//jobStep[stepName='insert_attribute']/jobStepId");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/01-InsertAttribute.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    my $expectedOutput = "";
    $expectedOutput .= "Using plugin EC-XMLEdit version " . $::gPlugin_ver . "\n";
    $expectedOutput .= "---------------------------------------------------------------------\n";
    $expectedOutput .= "Source: xml_code\n";
    $expectedOutput .= "Query: //book\n";
    $expectedOutput .= "Selection: all\n";
    $expectedOutput .= "---------------------------------------------------------------------\n";
    $expectedOutput .= "<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n";
    $expectedOutput .= "<bookstore>\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "<book category=\"UNDEFINED\">\n";
    $expectedOutput .= "  <title lang=\"en\">Everyday Italian</title>\n";
    $expectedOutput .= "  <author>Giada De Laurentiis</author>\n";
    $expectedOutput .= "  <year>2005</year>\n";
    $expectedOutput .= "  <price>30.00</price>\n";
    $expectedOutput .= "</book>\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "<book category=\"UNDEFINED\">\n";
    $expectedOutput .= "  <title lang=\"en\">Harry Potter</title>\n";
    $expectedOutput .= "  <author>J K. Rowling</author>\n";
    $expectedOutput .= "  <year>2005</year>\n";
    $expectedOutput .= "  <price>29.99</price>\n";
    $expectedOutput .= "</book>\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "<book category=\"UNDEFINED\">\n";
    $expectedOutput .= "  <title lang=\"en\">XQuery Kick Start</title>\n";
    $expectedOutput .= "  <author>James McGovern</author>\n";
    $expectedOutput .= "  <author>Per Bothner</author>\n";
    $expectedOutput .= "  <author>Kurt Cagle</author>\n";
    $expectedOutput .= "  <author>James Linn</author>\n";
    $expectedOutput .= "  <author>Vaidyanathan Nagarajan</author>\n";
    $expectedOutput .= "  <year>2003</year>\n";
    $expectedOutput .= "  <price>49.99</price>\n";
    $expectedOutput .= "</book>\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "<book category=\"UNDEFINED\">\n";
    $expectedOutput .= "  <title lang=\"en\">Learning XML</title>\n";
    $expectedOutput .= "  <author>Erik T. Ray</author>\n";
    $expectedOutput .= "  <year>2003</year>\n";
    $expectedOutput .= "  <price>39.95</price>\n";
    $expectedOutput .= "</book>\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "</bookstore>\n";

    assertDiff(outdent($expectedOutput), $data, '25. InsertAttribute with code existing attribute successful output');
};

ntest "26. UpdateElement with file", {}, sub {
    doSetup();
    setup();

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "update_element",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => [
                                                          {
                                                             actualParameterName => 'source',
                                                             value               => "filepath"
                                                          },
                                                          {
                                                             actualParameterName => 'query',
                                                             value               => "//book/author"
                                                          },
                                                          {
                                                             actualParameterName => 'file',
                                                             value               => "$::gTestFileDir/testdata/tmp/bookstore.xml"
                                                          },
                                                          {
                                                             actualParameterName => 'selection',
                                                             value               => "last"
                                                          },
                                                          {
                                                             actualParameterName => 'value',
                                                             value               => "Avantica"
                                                          },
                                                         ]
                                   }
                                  );

    # make sure it finished
    my $jobId     = 0;
    my $jobStepId = 0;
    my $status    = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . '/' . $xpath->findvalue("//jobStep[stepName='update_element']/calledProcedure/jobStep[stepName='UpdateElement']/logFileName");

    # Get the jobStepId
    $jobStepId = $xpath->findvalue("//jobStep[stepName='update_element']/jobStepId");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/01-UpdateElement.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    my $expectedOutput = "";
    $expectedOutput .= "Using plugin EC-XMLEdit version " . $::gPlugin_ver . "\n";
    $expectedOutput .= "---------------------------------------------------------------------\n";
    $expectedOutput .= "Source: filepath\n";
    $expectedOutput .= "Query: //book/author\n";
    $expectedOutput .= "Selection: last\n";
    $expectedOutput .= "---------------------------------------------------------------------\n";
    $expectedOutput .= "<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n";
    $expectedOutput .= "<bookstore>\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "<book category=\"COOKING\">\n";
    $expectedOutput .= "  <title lang=\"en\">Everyday Italian</title>\n";
    $expectedOutput .= "  <author>Giada De Laurentiis</author>\n";
    $expectedOutput .= "  <year>2005</year>\n";
    $expectedOutput .= "  <price>30.00</price>\n";
    $expectedOutput .= "</book>\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "<book category=\"CHILDREN\">\n";
    $expectedOutput .= "  <title lang=\"en\">Harry Potter</title>\n";
    $expectedOutput .= "  <author>J K. Rowling</author>\n";
    $expectedOutput .= "  <year>2005</year>\n";
    $expectedOutput .= "  <price>29.99</price>\n";
    $expectedOutput .= "</book>\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "<book category=\"WEB\">\n";
    $expectedOutput .= "  <title lang=\"en\">XQuery Kick Start</title>\n";
    $expectedOutput .= "  <author>James McGovern</author>\n";
    $expectedOutput .= "  <author>Per Bothner</author>\n";
    $expectedOutput .= "  <author>Kurt Cagle</author>\n";
    $expectedOutput .= "  <author>James Linn</author>\n";
    $expectedOutput .= "  <author>Vaidyanathan Nagarajan</author>\n";
    $expectedOutput .= "  <year>2003</year>\n";
    $expectedOutput .= "  <price>49.99</price>\n";
    $expectedOutput .= "</book>\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "<book category=\"WEB\">\n";
    $expectedOutput .= "  <title lang=\"en\">Learning XML</title>\n";
    $expectedOutput .= "  <author>Avantica</author>\n";
    $expectedOutput .= "  <year>2003</year>\n";
    $expectedOutput .= "  <price>39.95</price>\n";
    $expectedOutput .= "</book>\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "</bookstore>\n";

    assertDiff(outdent($expectedOutput), $data, '26. UpdateElement with file successful output');
};

ntest "27. UpdateAttribute with file", {}, sub {
    doSetup();
    setup();

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "update_attribute",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => [
                                                          {
                                                             actualParameterName => 'source',
                                                             value               => "filepath"
                                                          },
                                                          {
                                                             actualParameterName => 'file',
                                                             value               => "$::gTestFileDir/testdata/tmp/bookstore.xml"
                                                          },
                                                          {
                                                             actualParameterName => 'query',
                                                             value               => "//book"
                                                          },
                                                          {
                                                             actualParameterName => 'attribute',
                                                             value               => "category"
                                                          },
                                                          {
                                                             actualParameterName => 'value',
                                                             value               => "UNDEFINED"
                                                          },
                                                          {
                                                             actualParameterName => 'selection',
                                                             value               => "last"
                                                          },
                                                         ]
                                   }
                                  );

    # make sure it finished
    my $jobId     = 0;
    my $jobStepId = 0;
    my $status    = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . '/' . $xpath->findvalue("//jobStep[stepName='update_attribute']/calledProcedure/jobStep[stepName='UpdateAttribute']/logFileName");

    # Get the jobStepId
    $jobStepId = $xpath->findvalue("//jobStep[stepName='update_attribute']/jobStepId");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/01-UpdateAttribute.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    my $expectedOutput = "";
    $expectedOutput .= "Using plugin EC-XMLEdit version " . $::gPlugin_ver . "\n";
    $expectedOutput .= "---------------------------------------------------------------------\n";
    $expectedOutput .= "Source: filepath\n";
    $expectedOutput .= "Query: //book\n";
    $expectedOutput .= "Selection: last\n";
    $expectedOutput .= "---------------------------------------------------------------------\n";
    $expectedOutput .= "<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n";
    $expectedOutput .= "<bookstore>\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "<book category=\"COOKING\">\n";
    $expectedOutput .= "  <title lang=\"en\">Everyday Italian</title>\n";
    $expectedOutput .= "  <author>Giada De Laurentiis</author>\n";
    $expectedOutput .= "  <year>2005</year>\n";
    $expectedOutput .= "  <price>30.00</price>\n";
    $expectedOutput .= "</book>\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "<book category=\"CHILDREN\">\n";
    $expectedOutput .= "  <title lang=\"en\">Harry Potter</title>\n";
    $expectedOutput .= "  <author>J K. Rowling</author>\n";
    $expectedOutput .= "  <year>2005</year>\n";
    $expectedOutput .= "  <price>29.99</price>\n";
    $expectedOutput .= "</book>\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "<book category=\"WEB\">\n";
    $expectedOutput .= "  <title lang=\"en\">XQuery Kick Start</title>\n";
    $expectedOutput .= "  <author>James McGovern</author>\n";
    $expectedOutput .= "  <author>Per Bothner</author>\n";
    $expectedOutput .= "  <author>Kurt Cagle</author>\n";
    $expectedOutput .= "  <author>James Linn</author>\n";
    $expectedOutput .= "  <author>Vaidyanathan Nagarajan</author>\n";
    $expectedOutput .= "  <year>2003</year>\n";
    $expectedOutput .= "  <price>49.99</price>\n";
    $expectedOutput .= "</book>\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "<book category=\"UNDEFINED\">\n";
    $expectedOutput .= "  <title lang=\"en\">Learning XML</title>\n";
    $expectedOutput .= "  <author>Erik T. Ray</author>\n";
    $expectedOutput .= "  <year>2003</year>\n";
    $expectedOutput .= "  <price>39.95</price>\n";
    $expectedOutput .= "</book>\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "</bookstore>\n";

    assertDiff(outdent($expectedOutput), $data, '27. UpdateAttribute with file successful output');
};

ntest "28. UpdateAttribute with property and empty value", {}, sub {
    doSetup();
    setup();

    my $content = readFile("$::gTestFileDir/testdata/tmp/bookstore.xml");

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "update_attribute",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => [
                                                          {
                                                             actualParameterName => 'source',
                                                             value               => "property_path"
                                                          },
                                                          {
                                                             actualParameterName => 'property',
                                                             value               => "/myJob/bookstore"
                                                          },
                                                          {
                                                             actualParameterName => 'property_content',
                                                             value               => $content
                                                          },
                                                          {
                                                             actualParameterName => 'query',
                                                             value               => "//book"
                                                          },
                                                          {
                                                             actualParameterName => 'attribute',
                                                             value               => "category"
                                                          },
                                                          {
                                                             actualParameterName => 'value',
                                                             value               => ""
                                                          },
                                                          {
                                                             actualParameterName => 'selection',
                                                             value               => "first"
                                                          },
                                                         ]
                                   }
                                  );

    # make sure it finished
    my $jobId     = 0;
    my $jobStepId = 0;
    my $status    = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . '/' . $xpath->findvalue("//jobStep[stepName='update_attribute']/calledProcedure/jobStep[stepName='UpdateAttribute']/logFileName");

    # Get the jobStepId
    $jobStepId = $xpath->findvalue("//jobStep[stepName='update_attribute']/jobStepId");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/01-UpdateAttribute.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    my $expectedOutput = "";
    $expectedOutput .= "Using plugin EC-XMLEdit version " . $::gPlugin_ver . "\n";
    $expectedOutput .= "---------------------------------------------------------------------\n";
    $expectedOutput .= "Source: property_path\n";
    $expectedOutput .= "Query: //book\n";
    $expectedOutput .= "Selection: first\n";
    $expectedOutput .= "---------------------------------------------------------------------\n";
    $expectedOutput .= "<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n";
    $expectedOutput .= "<bookstore>\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "<book category=\"\">\n";
    $expectedOutput .= "  <title lang=\"en\">Everyday Italian</title>\n";
    $expectedOutput .= "  <author>Giada De Laurentiis</author>\n";
    $expectedOutput .= "  <year>2005</year>\n";
    $expectedOutput .= "  <price>30.00</price>\n";
    $expectedOutput .= "</book>\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "<book category=\"CHILDREN\">\n";
    $expectedOutput .= "  <title lang=\"en\">Harry Potter</title>\n";
    $expectedOutput .= "  <author>J K. Rowling</author>\n";
    $expectedOutput .= "  <year>2005</year>\n";
    $expectedOutput .= "  <price>29.99</price>\n";
    $expectedOutput .= "</book>\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "<book category=\"WEB\">\n";
    $expectedOutput .= "  <title lang=\"en\">XQuery Kick Start</title>\n";
    $expectedOutput .= "  <author>James McGovern</author>\n";
    $expectedOutput .= "  <author>Per Bothner</author>\n";
    $expectedOutput .= "  <author>Kurt Cagle</author>\n";
    $expectedOutput .= "  <author>James Linn</author>\n";
    $expectedOutput .= "  <author>Vaidyanathan Nagarajan</author>\n";
    $expectedOutput .= "  <year>2003</year>\n";
    $expectedOutput .= "  <price>49.99</price>\n";
    $expectedOutput .= "</book>\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "<book category=\"WEB\">\n";
    $expectedOutput .= "  <title lang=\"en\">Learning XML</title>\n";
    $expectedOutput .= "  <author>Erik T. Ray</author>\n";
    $expectedOutput .= "  <year>2003</year>\n";
    $expectedOutput .= "  <price>39.95</price>\n";
    $expectedOutput .= "</book>\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "</bookstore>\n";

    assertDiff(outdent($expectedOutput), $data, '28. UpdateAttribute with property and empty value successful output');
};

ntest "29. UpdateAttribute with code", {}, sub {
    doSetup();
    setup();
    my $content = readFile("$::gTestFileDir/testdata/tmp/bookstore.xml");

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "update_attribute",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => [
                                                          {
                                                             actualParameterName => 'source',
                                                             value               => "xml_code"
                                                          },
                                                          {
                                                             actualParameterName => 'code',
                                                             value               => $content
                                                          },
                                                          {
                                                             actualParameterName => 'query',
                                                             value               => "//book"
                                                          },
                                                          {
                                                             actualParameterName => 'attribute',
                                                             value               => "category"
                                                          },
                                                          {
                                                             actualParameterName => 'value',
                                                             value               => "EC"
                                                          },
                                                          {
                                                             actualParameterName => 'selection',
                                                             value               => "all"
                                                          },
                                                          {
                                                             actualParameterName => 'result',
                                                             value               => "/myJob/result_xml"
                                                          },
                                                         ]
                                   }
                                  );

    # make sure it finished
    my $jobId     = 0;
    my $jobStepId = 0;
    my $status    = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . '/' . $xpath->findvalue("//jobStep[stepName='update_attribute']/calledProcedure/jobStep[stepName='UpdateAttribute']/logFileName");

    # Get the jobStepId
    $jobStepId = $xpath->findvalue("//jobStep[stepName='update_attribute']/jobStepId");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/01-UpdateAttribute.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    my $expectedOutput = "";
    $expectedOutput .= "Using plugin EC-XMLEdit version " . $::gPlugin_ver . "\n";
    $expectedOutput .= "---------------------------------------------------------------------\n";
    $expectedOutput .= "Source: xml_code\n";
    $expectedOutput .= "Query: //book\n";
    $expectedOutput .= "Selection: all\n";
    $expectedOutput .= "---------------------------------------------------------------------\n";
    $expectedOutput .= "<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n";
    $expectedOutput .= "<bookstore>\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "<book category=\"EC\">\n";
    $expectedOutput .= "  <title lang=\"en\">Everyday Italian</title>\n";
    $expectedOutput .= "  <author>Giada De Laurentiis</author>\n";
    $expectedOutput .= "  <year>2005</year>\n";
    $expectedOutput .= "  <price>30.00</price>\n";
    $expectedOutput .= "</book>\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "<book category=\"EC\">\n";
    $expectedOutput .= "  <title lang=\"en\">Harry Potter</title>\n";
    $expectedOutput .= "  <author>J K. Rowling</author>\n";
    $expectedOutput .= "  <year>2005</year>\n";
    $expectedOutput .= "  <price>29.99</price>\n";
    $expectedOutput .= "</book>\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "<book category=\"EC\">\n";
    $expectedOutput .= "  <title lang=\"en\">XQuery Kick Start</title>\n";
    $expectedOutput .= "  <author>James McGovern</author>\n";
    $expectedOutput .= "  <author>Per Bothner</author>\n";
    $expectedOutput .= "  <author>Kurt Cagle</author>\n";
    $expectedOutput .= "  <author>James Linn</author>\n";
    $expectedOutput .= "  <author>Vaidyanathan Nagarajan</author>\n";
    $expectedOutput .= "  <year>2003</year>\n";
    $expectedOutput .= "  <price>49.99</price>\n";
    $expectedOutput .= "</book>\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "<book category=\"EC\">\n";
    $expectedOutput .= "  <title lang=\"en\">Learning XML</title>\n";
    $expectedOutput .= "  <author>Erik T. Ray</author>\n";
    $expectedOutput .= "  <year>2003</year>\n";
    $expectedOutput .= "  <price>39.95</price>\n";
    $expectedOutput .= "</book>\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "</bookstore>\n";

    assertDiff(outdent($expectedOutput), $data, '29. UpdateAttribute with code successful output');
};

ntest "30. UpdateAttribute with code wrong query", {}, sub {
    doSetup();
    setup();
    my $content = readFile("$::gTestFileDir/testdata/tmp/bookstore.xml");

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "update_attribute",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => [
                                                          {
                                                             actualParameterName => 'source',
                                                             value               => "xml_code"
                                                          },
                                                          {
                                                             actualParameterName => 'code',
                                                             value               => $content
                                                          },
                                                          {
                                                             actualParameterName => 'query',
                                                             value               => "//booksd"
                                                          },
                                                          {
                                                             actualParameterName => 'attribute',
                                                             value               => "category"
                                                          },
                                                          {
                                                             actualParameterName => 'value',
                                                             value               => "UNDEFINED"
                                                          },
                                                          {
                                                             actualParameterName => 'selection',
                                                             value               => "all"
                                                          },
                                                          {
                                                             actualParameterName => 'result',
                                                             value               => "/myJob/result_xml"
                                                          },
                                                         ]
                                   }
                                  );

    # make sure it finished
    my $jobId     = 0;
    my $jobStepId = 0;
    my $status    = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . '/' . $xpath->findvalue("//jobStep[stepName='update_attribute']/calledProcedure/jobStep[stepName='UpdateAttribute']/logFileName");

    # Get the jobStepId
    $jobStepId = $xpath->findvalue("//jobStep[stepName='update_attribute']/jobStepId");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/01-UpdateAttribute.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    my $expectedOutput = "";
    $expectedOutput .= "Using plugin EC-XMLEdit version " . $::gPlugin_ver . "\n";
    $expectedOutput .= "---------------------------------------------------------------------\n";
    $expectedOutput .= "Source: xml_code\n";
    $expectedOutput .= "Query: //booksd\n";
    $expectedOutput .= "Selection: all\n";
    $expectedOutput .= "---------------------------------------------------------------------\n";
    $expectedOutput .= "ERROR: Query: '//booksd' did not return values.\n";

    assertDiff(outdent($expectedOutput), $data, '30. UpdateAttribute with code wrong query successful output');
};

ntest "31. UpdateAttribute with code unexisting attribute", {}, sub {
    doSetup();
    setup();
    my $content = readFile("$::gTestFileDir/testdata/tmp/bookstore.xml");

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "update_attribute",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => [
                                                          {
                                                             actualParameterName => 'source',
                                                             value               => "xml_code"
                                                          },
                                                          {
                                                             actualParameterName => 'code',
                                                             value               => $content
                                                          },
                                                          {
                                                             actualParameterName => 'query',
                                                             value               => "//book"
                                                          },
                                                          {
                                                             actualParameterName => 'attribute',
                                                             value               => "state"
                                                          },
                                                          {
                                                             actualParameterName => 'value',
                                                             value               => "new"
                                                          },
                                                          {
                                                             actualParameterName => 'selection',
                                                             value               => "all"
                                                          },
                                                          {
                                                             actualParameterName => 'result',
                                                             value               => "/myJob/result_xml"
                                                          },
                                                         ]
                                   }
                                  );

    # make sure it finished
    my $jobId     = 0;
    my $jobStepId = 0;
    my $status    = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . '/' . $xpath->findvalue("//jobStep[stepName='update_attribute']/calledProcedure/jobStep[stepName='UpdateAttribute']/logFileName");

    # Get the jobStepId
    $jobStepId = $xpath->findvalue("//jobStep[stepName='update_attribute']/jobStepId");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/01-UpdateAttribute.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    my $expectedOutput = "";
    $expectedOutput .= "Using plugin EC-XMLEdit version " . $::gPlugin_ver . "\n";
    $expectedOutput .= "---------------------------------------------------------------------\n";
    $expectedOutput .= "Source: xml_code\n";
    $expectedOutput .= "Query: //book\n";
    $expectedOutput .= "Selection: all\n";
    $expectedOutput .= "---------------------------------------------------------------------\n";
    $expectedOutput .= "Attribute 'state' not found.\n";
    $expectedOutput .= "Attribute 'state' not found.\n";
    $expectedOutput .= "Attribute 'state' not found.\n";
    $expectedOutput .= "Attribute 'state' not found.\n";
    $expectedOutput .= "<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n";
    $expectedOutput .= "<bookstore>\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "<book category=\"COOKING\">\n";
    $expectedOutput .= "  <title lang=\"en\">Everyday Italian</title>\n";
    $expectedOutput .= "  <author>Giada De Laurentiis</author>\n";
    $expectedOutput .= "  <year>2005</year>\n";
    $expectedOutput .= "  <price>30.00</price>\n";
    $expectedOutput .= "</book>\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "<book category=\"CHILDREN\">\n";
    $expectedOutput .= "  <title lang=\"en\">Harry Potter</title>\n";
    $expectedOutput .= "  <author>J K. Rowling</author>\n";
    $expectedOutput .= "  <year>2005</year>\n";
    $expectedOutput .= "  <price>29.99</price>\n";
    $expectedOutput .= "</book>\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "<book category=\"WEB\">\n";
    $expectedOutput .= "  <title lang=\"en\">XQuery Kick Start</title>\n";
    $expectedOutput .= "  <author>James McGovern</author>\n";
    $expectedOutput .= "  <author>Per Bothner</author>\n";
    $expectedOutput .= "  <author>Kurt Cagle</author>\n";
    $expectedOutput .= "  <author>James Linn</author>\n";
    $expectedOutput .= "  <author>Vaidyanathan Nagarajan</author>\n";
    $expectedOutput .= "  <year>2003</year>\n";
    $expectedOutput .= "  <price>49.99</price>\n";
    $expectedOutput .= "</book>\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "<book category=\"WEB\">\n";
    $expectedOutput .= "  <title lang=\"en\">Learning XML</title>\n";
    $expectedOutput .= "  <author>Erik T. Ray</author>\n";
    $expectedOutput .= "  <year>2003</year>\n";
    $expectedOutput .= "  <price>39.95</price>\n";
    $expectedOutput .= "</book>\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "</bookstore>\n";

    assertDiff(outdent($expectedOutput), $data, '31. UpdateAttribute with code unexisting attribute successful output');
};

ntest "32. ExtractElement with file", {}, sub {
    doSetup();
    setup();

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "extract_element",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => [
                                                          {
                                                             actualParameterName => 'source',
                                                             value               => "filepath"
                                                          },
                                                          {
                                                             actualParameterName => 'query',
                                                             value               => "//book/price"
                                                          },
                                                          {
                                                             actualParameterName => 'file',
                                                             value               => "$::gTestFileDir/testdata/tmp/bookstore.xml"
                                                          },
                                                          {
                                                             actualParameterName => 'selection',
                                                             value               => "last"
                                                          },
                                                          {
                                                             actualParameterName => 'result',
                                                             value               => "/myJob/result"
                                                          },
                                                          {
                                                             actualParameterName => 'result_xml',
                                                             value               => "/myJob/result/result_xml"
                                                          },
                                                         ]
                                   }
                                  );

    # make sure it finished
    my $jobId     = 0;
    my $jobStepId = 0;
    my $status    = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . '/' . $xpath->findvalue("//jobStep[stepName='extract_element']/calledProcedure/jobStep[stepName='ExtractElement']/logFileName");

    # Get the jobStepId
    $jobStepId = $xpath->findvalue("//jobStep[stepName='extract_element']/jobStepId");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/01-ExtractElement.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    my $expectedOutput = "";
    $expectedOutput .= "Using plugin EC-XMLEdit version " . $::gPlugin_ver . "\n";
    $expectedOutput .= "---------------------------------------------------------------------\n";
    $expectedOutput .= "Source: filepath\n";
    $expectedOutput .= "Query: //book/price\n";
    $expectedOutput .= "Selection: last\n";
    $expectedOutput .= "---------------------------------------------------------------------\n";
    $expectedOutput .= "<price>39.95</price>\n\n";

    assertDiff(outdent($expectedOutput), $data, '32. ExtractElement with file successful output');
};

ntest "33. ExtractElement with code wrong query", {}, sub {
    doSetup();
    setup();
    my $content = readFile("$::gTestFileDir/testdata/tmp/bookstore.xml");

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "extract_element",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => [
                                                          {
                                                             actualParameterName => 'source',
                                                             value               => "xml_code"
                                                          },
                                                          {
                                                             actualParameterName => 'query',
                                                             value               => "//book/prices"
                                                          },
                                                          {
                                                             actualParameterName => 'code',
                                                             value               => $content
                                                          },
                                                          {
                                                             actualParameterName => 'selection',
                                                             value               => "all"
                                                          },
                                                          {
                                                             actualParameterName => 'result',
                                                             value               => "/myJob/result"
                                                          },
                                                          {
                                                             actualParameterName => 'result_xml',
                                                             value               => "/myJob/result/result_xml"
                                                          },
                                                         ]
                                   }
                                  );

    # make sure it finished
    my $jobId     = 0;
    my $jobStepId = 0;
    my $status    = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . '/' . $xpath->findvalue("//jobStep[stepName='extract_element']/calledProcedure/jobStep[stepName='ExtractElement']/logFileName");

    # Get the jobStepId
    $jobStepId = $xpath->findvalue("//jobStep[stepName='extract_element']/jobStepId");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/01-ExtractElement.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    my $expectedOutput = "";
    $expectedOutput .= "Using plugin EC-XMLEdit version " . $::gPlugin_ver . "\n";
    $expectedOutput .= "---------------------------------------------------------------------\n";
    $expectedOutput .= "Source: xml_code\n";
    $expectedOutput .= "Query: //book/prices\n";
    $expectedOutput .= "Selection: all\n";
    $expectedOutput .= "---------------------------------------------------------------------\n";
    $expectedOutput .= "ERROR: Query: '//book/prices' did not return values.\n";

    assertDiff(outdent($expectedOutput), $data, '33. ExtractElement with code wrong query successful output');
};

ntest "34. ExtractAttribute with file", {}, sub {
    doSetup();
    setup();

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "extract_attribute",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => [
                                                          {
                                                             actualParameterName => 'source',
                                                             value               => "filepath"
                                                          },
                                                          {
                                                             actualParameterName => 'query',
                                                             value               => "//book"
                                                          },
                                                          {
                                                             actualParameterName => 'file',
                                                             value               => "$::gTestFileDir/testdata/tmp/bookstore.xml"
                                                          },
                                                          {
                                                             actualParameterName => 'selection',
                                                             value               => "first"
                                                          },
                                                          {
                                                             actualParameterName => 'result',
                                                             value               => "/myJob/result"
                                                          },
                                                          {
                                                             actualParameterName => 'attribute',
                                                             value               => "category"
                                                          },
                                                          {
                                                             actualParameterName => 'result_xml',
                                                             value               => "/myJob/result/result_xml"
                                                          },
                                                         ]
                                   }
                                  );

    # make sure it finished
    my $jobId     = 0;
    my $jobStepId = 0;
    my $status    = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . '/' . $xpath->findvalue("//jobStep[stepName='extract_attribute']/calledProcedure/jobStep[stepName='ExtractAttribute']/logFileName");

    # Get the jobStepId
    $jobStepId = $xpath->findvalue("//jobStep[stepName='extract_attribute']/jobStepId");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/01-ExtractAttribute.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    my $expectedOutput = "";
    $expectedOutput .= "Using plugin EC-XMLEdit version " . $::gPlugin_ver . "\n";
    $expectedOutput .= "---------------------------------------------------------------------\n";
    $expectedOutput .= "Source: filepath\n";
    $expectedOutput .= "Query: //book\n";
    $expectedOutput .= "Selection: first\n";
    $expectedOutput .= "---------------------------------------------------------------------\n";
    $expectedOutput .= "COOKING\n";
    $expectedOutput .= "<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n";
    $expectedOutput .= "<bookstore>\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "<book>\n";
    $expectedOutput .= "  <title lang=\"en\">Everyday Italian</title>\n";
    $expectedOutput .= "  <author>Giada De Laurentiis</author>\n";
    $expectedOutput .= "  <year>2005</year>\n";
    $expectedOutput .= "  <price>30.00</price>\n";
    $expectedOutput .= "</book>\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "<book category=\"CHILDREN\">\n";
    $expectedOutput .= "  <title lang=\"en\">Harry Potter</title>\n";
    $expectedOutput .= "  <author>J K. Rowling</author>\n";
    $expectedOutput .= "  <year>2005</year>\n";
    $expectedOutput .= "  <price>29.99</price>\n";
    $expectedOutput .= "</book>\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "<book category=\"WEB\">\n";
    $expectedOutput .= "  <title lang=\"en\">XQuery Kick Start</title>\n";
    $expectedOutput .= "  <author>James McGovern</author>\n";
    $expectedOutput .= "  <author>Per Bothner</author>\n";
    $expectedOutput .= "  <author>Kurt Cagle</author>\n";
    $expectedOutput .= "  <author>James Linn</author>\n";
    $expectedOutput .= "  <author>Vaidyanathan Nagarajan</author>\n";
    $expectedOutput .= "  <year>2003</year>\n";
    $expectedOutput .= "  <price>49.99</price>\n";
    $expectedOutput .= "</book>\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "<book category=\"WEB\">\n";
    $expectedOutput .= "  <title lang=\"en\">Learning XML</title>\n";
    $expectedOutput .= "  <author>Erik T. Ray</author>\n";
    $expectedOutput .= "  <year>2003</year>\n";
    $expectedOutput .= "  <price>39.95</price>\n";
    $expectedOutput .= "</book>\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "</bookstore>\n";

    assertDiff(outdent($expectedOutput), $data, '34. ExtractAttribute with file successful output');
};

ntest "35. ExtractAttribute with code", {}, sub {
    doSetup();
    setup();
    my $content = readFile("$::gTestFileDir/testdata/tmp/bookstore.xml");

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "extract_attribute",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => [
                                                          {
                                                             actualParameterName => 'source',
                                                             value               => "xml_code"
                                                          },
                                                          {
                                                             actualParameterName => 'query',
                                                             value               => "//book"
                                                          },
                                                          {
                                                             actualParameterName => 'code',
                                                             value               => $content
                                                          },
                                                          {
                                                             actualParameterName => 'selection',
                                                             value               => "all"
                                                          },
                                                          {
                                                             actualParameterName => 'result',
                                                             value               => "/myJob/results"
                                                          },
                                                          {
                                                             actualParameterName => 'attribute',
                                                             value               => "category"
                                                          },
                                                          {
                                                             actualParameterName => 'result_xml',
                                                             value               => "/myJob/results/result_xml"
                                                          },
                                                         ]
                                   }
                                  );

    # make sure it finished
    my $jobId     = 0;
    my $jobStepId = 0;
    my $status    = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . '/' . $xpath->findvalue("//jobStep[stepName='extract_attribute']/calledProcedure/jobStep[stepName='ExtractAttribute']/logFileName");

    # Get the jobStepId
    $jobStepId = $xpath->findvalue("//jobStep[stepName='extract_attribute']/jobStepId");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/01-ExtractAttribute.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    my $expectedOutput = "";
    $expectedOutput .= "Using plugin EC-XMLEdit version " . $::gPlugin_ver . "\n";
    $expectedOutput .= "---------------------------------------------------------------------\n";
    $expectedOutput .= "Source: xml_code\n";
    $expectedOutput .= "Query: //book\n";
    $expectedOutput .= "Selection: all\n";
    $expectedOutput .= "---------------------------------------------------------------------\n";
    $expectedOutput .= "COOKING\n";
    $expectedOutput .= "CHILDREN\n";
    $expectedOutput .= "WEB\n";
    $expectedOutput .= "WEB\n";
    $expectedOutput .= "<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n";
    $expectedOutput .= "<bookstore>\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "<book>\n";
    $expectedOutput .= "  <title lang=\"en\">Everyday Italian</title>\n";
    $expectedOutput .= "  <author>Giada De Laurentiis</author>\n";
    $expectedOutput .= "  <year>2005</year>\n";
    $expectedOutput .= "  <price>30.00</price>\n";
    $expectedOutput .= "</book>\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "<book>\n";
    $expectedOutput .= "  <title lang=\"en\">Harry Potter</title>\n";
    $expectedOutput .= "  <author>J K. Rowling</author>\n";
    $expectedOutput .= "  <year>2005</year>\n";
    $expectedOutput .= "  <price>29.99</price>\n";
    $expectedOutput .= "</book>\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "<book>\n";
    $expectedOutput .= "  <title lang=\"en\">XQuery Kick Start</title>\n";
    $expectedOutput .= "  <author>James McGovern</author>\n";
    $expectedOutput .= "  <author>Per Bothner</author>\n";
    $expectedOutput .= "  <author>Kurt Cagle</author>\n";
    $expectedOutput .= "  <author>James Linn</author>\n";
    $expectedOutput .= "  <author>Vaidyanathan Nagarajan</author>\n";
    $expectedOutput .= "  <year>2003</year>\n";
    $expectedOutput .= "  <price>49.99</price>\n";
    $expectedOutput .= "</book>\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "<book>\n";
    $expectedOutput .= "  <title lang=\"en\">Learning XML</title>\n";
    $expectedOutput .= "  <author>Erik T. Ray</author>\n";
    $expectedOutput .= "  <year>2003</year>\n";
    $expectedOutput .= "  <price>39.95</price>\n";
    $expectedOutput .= "</book>\n";
    $expectedOutput .= "\n";
    $expectedOutput .= "</bookstore>\n";

    assertDiff(outdent($expectedOutput), $data, '35. ExtractAttribute with code successful output');
};

ntest "36. ExtractAttribute with code unexisting attribute", {}, sub {
    doSetup();
    setup();
    my $content = readFile("$::gTestFileDir/testdata/tmp/bookstore.xml");

    # run test job
    my $xpath = $::N->runProcedure(
                                   $::gtestProjectName,
                                   {
                                      procedureName   => "extract_attribute",
                                      pollInterval    => '1',
                                      timeout         => 600,
                                      actualParameter => [
                                                          {
                                                             actualParameterName => 'source',
                                                             value               => "xml_code"
                                                          },
                                                          {
                                                             actualParameterName => 'query',
                                                             value               => "//book"
                                                          },
                                                          {
                                                             actualParameterName => 'code',
                                                             value               => $content
                                                          },
                                                          {
                                                             actualParameterName => 'selection',
                                                             value               => "all"
                                                          },
                                                          {
                                                             actualParameterName => 'result',
                                                             value               => "/myJob/result"
                                                          },
                                                          {
                                                             actualParameterName => 'attribute',
                                                             value               => "lang"
                                                          },
                                                          {
                                                             actualParameterName => 'result_xml',
                                                             value               => "/myJob/result/result_xml"
                                                          },
                                                         ]
                                   }
                                  );

    # make sure it finished
    my $jobId     = 0;
    my $jobStepId = 0;
    my $status    = "";

    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed', $status, "job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, { force => 1 }));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # Get the root of log files. use UNC so it works from
    # command line as well as within a CMD step
    my $ws = $xpath->findvalue("//workspace/winUNC");
    if (!isWindows()) {
        $ws = $xpath->findvalue("//workspace/unix");
    }

    # Get the name of the log file
    my $logFileName = $ws . '/' . $xpath->findvalue("//jobStep[stepName='extract_attribute']/calledProcedure/jobStep[stepName='ExtractAttribute']/logFileName");

    # Get the jobStepId
    $jobStepId = $xpath->findvalue("//jobStep[stepName='extract_attribute']/jobStepId");

    # Read the log file and verify its contents.
    my $data = readFile($logFileName);

    # write the job details to a file in the test directory
    writeFile("$::gCurrentTestDir/01-ExtractAttribute.log", "====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");

    my $expectedOutput = "";
    $expectedOutput .= "Using plugin EC-XMLEdit version " . $::gPlugin_ver . "\n";
    $expectedOutput .= "---------------------------------------------------------------------\n";
    $expectedOutput .= "Source: xml_code\n";
    $expectedOutput .= "Query: //book\n";
    $expectedOutput .= "Selection: all\n";
    $expectedOutput .= "---------------------------------------------------------------------\n";
    $expectedOutput .= "ERROR: Query: '//book/\@lang' did not return values.\n";

    assertDiff(outdent($expectedOutput), $data, '36. ExtractAttribute with code unexisting attribute successful output');
};

1;
